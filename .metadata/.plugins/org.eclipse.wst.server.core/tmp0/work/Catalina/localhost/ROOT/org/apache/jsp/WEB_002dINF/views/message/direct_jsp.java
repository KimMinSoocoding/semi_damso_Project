/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.68
 * Generated at: 2023-04-25 06:12:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.message;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class direct_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1669273540242L));
    _jspx_dependants.put("jar:file:/Users/minsoo/Desktop/team/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/sns_damso/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/Users/minsoo/Desktop/team/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/sns_damso/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../layout/header.jsp", out, false);
      out.write("\r\n");
      out.write("<link\r\n");
      out.write("	href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/styleBoard_230407.css\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("<link\r\n");
      out.write("	href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/clubget.css\"\r\n");
      out.write("	rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("	.content {\r\n");
      out.write("		overflow-y:hidden;\r\n");
      out.write("	}\r\n");
      out.write("	.dm {\r\n");
      out.write("		max-width: 935px;\r\n");
      out.write("		background-color: white;\r\n");
      out.write("		border: #e8e8e8 solid 1px;\r\n");
      out.write("		margin: 40px auto;\r\n");
      out.write("		max-height: 700px;\r\n");
      out.write("		height:85%;\r\n");
      out.write("		overflow-y: hidden;\r\n");
      out.write("	}\r\n");
      out.write("	select {\r\n");
      out.write("	   -webkit-appearance:none; /* for chrome */\r\n");
      out.write("	   -moz-appearance:none; /*for firefox*/\r\n");
      out.write("	   appearance:none;\r\n");
      out.write("	}\r\n");
      out.write("	select::-ms-expand{\r\n");
      out.write("	   display:none;/*for IE10,11*/\r\n");
      out.write("	}\r\n");
      out.write("	select {\r\n");
      out.write("	   background:url('arr_pink.gif') no-repeat 97% 50%/15px auto;\r\n");
      out.write("	}\r\n");
      out.write("	.chatList > .p-2:hover {\r\n");
      out.write("	background-color:#f4f4f4d1;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<div class=\"dm d-flex\">\r\n");
      out.write("		<div class=\"col-12 d-flex flex-row flex-wrap align-content-start\">\r\n");
      out.write("\r\n");
      out.write("			<div class=\"h-100 col-4 d-flex align-content-start flex-column flex-wrap border-end position-relative\">\r\n");
      out.write("				<div class=\"col-12 m-0 py-3 border-bottom \" style=\"height:fit-content;text-align: center; \"><span class=\"fw-bold\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.id }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("&nbsp;</span></div>\r\n");
      out.write("				<i class=\"sendMessage position-absolute fas fa-edit\" style=\"cursor:pointer; top:16px; right:23px; font-size:20px\"></i>\r\n");
      out.write("				<div class=\"col-12 mb-auto\" style=\"flex: 1; overflow-y: auto;\">\r\n");
      out.write("					<!-- 채팅 리스트 -->\r\n");
      out.write("					<div class=\"chatList pt-2 d-flex flex-column\" style=\"\">\r\n");
      out.write("\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("\r\n");
      out.write("			<div class=\"col-8 h-100 d-flex flex-wrap\">\r\n");
      out.write("				<div class=\"d-flex col-12 h-100 position-relative flex-wrap\">\r\n");
      out.write("					<!-- 채팅 상대 -->\r\n");
      out.write("					<div class=\"col-12 0 p-3 border-bottom position-absolute top-0\"\r\n");
      out.write("						style=\"height:fit-content; background-color: white;\">\r\n");
      out.write("						<div class=\"noteBox-title ps-4\">\r\n");
      out.write("							<span class=\"fw-bold\">&nbsp;</span>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div class=\"noteBox p-3 col-12 my-5 d-flex border-bottom bg-white flex-column-reverse\"\r\n");
      out.write("						style=\"height: -webkit-fill-available; overflow-y: auto; \">\r\n");
      out.write("						<!-- js로 채팅 내용 -->\r\n");
      out.write("						<div class=\"d-flex col-12 h-100 justify-content-center sendMessage\"\r\n");
      out.write("							style=\"cursor:pointer\">\r\n");
      out.write("							<span class=\"d-inline-flex align-items-center flex-column justify-content-center fs-5\">\r\n");
      out.write("							<i class=\"fas fa-edit fs-2 pb-4\" style=\"cursor:pointer; color:#959595\"></i>\r\n");
      out.write("							친구에게 메시지를 보내보세요\r\n");
      out.write("							</span>\r\n");
      out.write("						</div>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div class=\"col-12 d-flex position-absolute bottom-0 border-top \" >\r\n");
      out.write("					<input type=\"text\" id=\"textMessage\" class=\"py-3 px-2 col-10\"\r\n");
      out.write("						style=\"border: none;\">\r\n");
      out.write("					<button id=\"btnSend\" class=\"col-2 align-self-stretch bg-white\"\r\n");
      out.write("						style=\"border: none;\">\r\n");
      out.write("						전송</button>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- 메시지 상대 선택하기 모달 Strat -->\r\n");
      out.write("	<div class=\"modal fade\" id=\"receiver-modal\" tabindex=\"-1\"\r\n");
      out.write("		role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\r\n");
      out.write("		<div class=\"modal-dialog modal-dialog-centered modal-lg\" style=\"width: 400px; height:450px\"\r\n");
      out.write("			role=\"document\">\r\n");
      out.write("			<div class=\"modal-content flex-column flex-wrap\" style=\"border-radius: 10px;height:450px\">\r\n");
      out.write("				<div class=\"h-25 border-bottom\">\r\n");
      out.write("					<div class=\"h-50 text-center fw-bold py-3\">새로운 메시지</div>\r\n");
      out.write("					<div class=\"h-50 d-inline-flex align-items-end pb-3\">\r\n");
      out.write("						<div class=\"px-3 ps-4 py-2\">받는 사람:</div>\r\n");
      out.write("						<input class=\"border-0 bg-light px-2\" type=\"text\" placeholder=\"아이디 검색\"\r\n");
      out.write("							style=\"height: 40px; width: 250px\">\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"sendTo h-75 overflow-auto\">\r\n");
      out.write("					\r\n");
      out.write("\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("<!-- 메시지 상대 선택하기 모달 End -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/message.js\"></script>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("	$(function() {\r\n");
      out.write("		let user = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.email}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("';\r\n");
      out.write("		let receiverEmail = \"\";\r\n");
      out.write("		\r\n");
      out.write("		/* 모든 멤버 리스트 html */\r\n");
      out.write("		function memberListStr(obj){\r\n");
      out.write("			return `\r\n");
      out.write("			<!-- member one -->\r\n");
      out.write("			<div class=\"p-2 ps-4\" style=\"cursor: pointer;\">\r\n");
      out.write("				<div class=\"d-flex align-content-start\" style=\"font-size:16px\">\r\n");
      out.write("					<img style=\"width: 38px; height:38px\" class=\"m-1 ms-2 mt-2 img-fluid rounded-circle\" src=\"../../../resources/img/attach.jpg\" alt=\"User\"> \r\n");
      out.write("					<div class=\"ps-3 pt-1 flex-column\" style=\"display:inline-flex;\">\r\n");
      out.write("						<span>${obj.id}</span>\r\n");
      out.write("						<span style=\"font-size:14px; color:#b3b3b3\">${obj.name}</span>\r\n");
      out.write("						<input type=\"hidden\" value=\"${obj.email}\" data-id=\"${obj.id}\">\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>			\r\n");
      out.write("			`;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		/* 채팅방 목록 리스트 str */\r\n");
      out.write("		function ChatListStr(receive , obj){\r\n");
      out.write("			return `\r\n");
      out.write("			<!-- 채팅 1 -->\r\n");
      out.write("			<div class=\"p-2 \" style=\"cursor: pointer; height:75px\" data-mno=\"${obj.mno}\" data-room=\"${obj.room}\">\r\n");
      out.write("				<div class=\"d-flex align-content-start\" style=\"font-size:16px\">\r\n");
      out.write("				<img style=\"width: 48px; height:48px\" class=\"m-1 ms-2 img-fluid rounded-circle\" src=\"../../../resources/img/attach.jpg\" alt=\"User\"> \r\n");
      out.write("				<div class=\"ps-3 pt-1 flex-column\" style=\"display:inline-flex;\">\r\n");
      out.write("					<span style=\"max-width: 150px\">${receive.id}</span>\r\n");
      out.write("					<span style=\"font-size:14px; color:#b3b3b3; max-width: 150px\">${obj.message}</span>\r\n");
      out.write("				</div>\r\n");
      out.write("					<div class=\"float-end pt-3 pe-2 ms-auto\" style=\"font-size:14px\">${moment(obj.sdate).fromNow()}</div>\r\n");
      out.write("					<span class=\"float-end checkReceiveIcon d-inline-flex align-items-center \" data-value=\"${obj.mno}\"></span>\r\n");
      out.write("				</div>\r\n");
      out.write("				<input type=\"hidden\" value=\"${receive.email}\" data-id=\"${receive.id}\">\r\n");
      out.write("			</div>\r\n");
      out.write("			`;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		/* 수신자와의 채팅방 초기화 */\r\n");
      out.write("		function showChating(receiverEmail, receiverId) {\r\n");
      out.write("   			$(\".noteBox\").html('')\r\n");
      out.write("			messageService.chat({receiver: receiverEmail , sender : user}, function (data) {\r\n");
      out.write("				$(\".noteBox-title span\").html(receiverId)\r\n");
      out.write("				\r\n");
      out.write("				for(let i in data){\r\n");
      out.write("					let chk = '';\r\n");
      out.write("					data[i].rdate == null ? chk = '1': chk = '' ;\r\n");
      out.write("					\r\n");
      out.write(" 					if(data[i].sender === user) {\r\n");
      out.write("						$(\".noteBox\").prepend(sendStr(data[i], chk))\r\n");
      out.write("					} else {\r\n");
      out.write("						$(\".noteBox\").prepend(receiveStr(data[i], ''))\r\n");
      out.write("						if(data[i].rdate == null){\r\n");
      out.write("	 						messageService.receive({mno : data[i].mno} , function() {\r\n");
      out.write("	 							checkReceive(data[i], false)\r\n");
      out.write("	 						})\r\n");
      out.write("						}\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			})\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		/* 채팅방 목록 초기화 */\r\n");
      out.write("		memberService.getList({}, function(result) {\r\n");
      out.write("			$(\".chatList\").html('')\r\n");
      out.write("			/* 채팅방 정렬을 위한 배열 선언 */\r\n");
      out.write("			let thisChat = \"\";\r\n");
      out.write("			/* 친구 목록 모두 탐색 */\r\n");
      out.write("			for(let i in result){\r\n");
      out.write("				/* 친구와의 채팅이 기존에 존재하면 채팅방 출력 */\r\n");
      out.write("				messageService.chat({receiver: result[i].email, sender: user}, function(obj) {\r\n");
      out.write("					if(obj.length != 0) {\r\n");
      out.write("\r\n");
      out.write("						/* 채팅방 정렬을 위해, 배열에 각 채팅방의 마지막 채팅 담기 */\r\n");
      out.write("						/* arr.push(obj[obj.length - 1]); */\r\n");
      out.write("						/* console.log(arr) */\r\n");
      out.write("						/* console.log(Object.values(arr)) */\r\n");
      out.write(" 						$(\".chatList\").prepend(ChatListStr(result[i], obj[obj.length - 1]))\r\n");
      out.write("						checkReceive(obj[obj.length - 1], true)\r\n");
      out.write(" 						/* 수신 미확인 아이콘 표시 */\r\n");
      out.write("/* 						thisChat = obj[obj.length - 1].mno;\r\n");
      out.write("\r\n");
      out.write("						console.log(thisChat)\r\n");
      out.write(" 						if(obj[obj.length - 1].rdate == null && obj[obj.length - 1].receiver == '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.email}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("') {\r\n");
      out.write(" 							let $this = document.querySelector(\".checkReceiveIcon\");\r\n");
      out.write(" 							console.log($this.dataset.value)\r\n");
      out.write(" 							if($this.dataset.value == thisChat) {\r\n");
      out.write(" 								console.log($this)\r\n");
      out.write(" 								$($this).html('<i class=\"fas fa-circle\" style=\"color: #fdb5b8; font-size:10px\"></i>')\r\n");
      out.write(" 							}\r\n");
      out.write("						} */\r\n");
      out.write(" 					}\r\n");
      out.write("\r\n");
      out.write("				})\r\n");
      out.write("			}\r\n");
      out.write("		})\r\n");
      out.write("\r\n");
      out.write("		/* 수신 확인 아이콘 표시 */\r\n");
      out.write("		function checkReceive(obj, on) {\r\n");
      out.write("				if(obj.rdate == null && obj.receiver == '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.email}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("') {\r\n");
      out.write("						let $this = document.querySelector(\".checkReceiveIcon\");\r\n");
      out.write("						console.log($this.dataset.value)\r\n");
      out.write("						if($this.dataset.value == obj.mno) {\r\n");
      out.write("							console.log($this)\r\n");
      out.write("							if(on){\r\n");
      out.write("								$($this).html('<i class=\"fas fa-circle\" style=\"color: #fdb5b8; font-size:10px\"></i>')\r\n");
      out.write("							}\r\n");
      out.write("							else {\r\n");
      out.write("								$($this).html('')\r\n");
      out.write("							}\r\n");
      out.write("						}\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		/* 채팅방 선택시 채팅방 출력 */\r\n");
      out.write("  		$(\".chatList\").on(\"click\", \"> *\", function() {\r\n");
      out.write("			receiverEmail = $(this).find(\"input\").val();\r\n");
      out.write("			receiverId = $(this).find(\"input\").data(\"id\");\r\n");
      out.write("			showChating(receiverEmail, receiverId);\r\n");
      out.write("			$(this).find(\".checkReceiveIcon\").html(\"\")\r\n");
      out.write("		})  \r\n");
      out.write("		\r\n");
      out.write("		/* 메시지 보내기 아이콘 클릭 후 친구 선택 모달, 선택 후 해당 채팅방 출력 */\r\n");
      out.write("		$(\".sendMessage\").on(\"click\", function() {\r\n");
      out.write("			$(\"#receiver-modal\").modal(\"show\")			\r\n");
      out.write("			memberService.getList({}, function(result) {\r\n");
      out.write("				/* 친구 목록 출력 */\r\n");
      out.write("				$(\".sendTo\").html('');				\r\n");
      out.write("				let str = \"\";\r\n");
      out.write("				/* 지금은 전체 멤버! 친구목록으로 바꾸어야 함!!!!!!!!!!!!!!! */\r\n");
      out.write("				let title = `<div class=\"fw-bold pt-2 ps-3\">친구목록</div>`;\r\n");
      out.write("				for(let i in result) {\r\n");
      out.write("					// 본인 제외\r\n");
      out.write("					if(result[i].email != '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.email}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("' && result[i].email != '탈퇴된 회원입니다'){\r\n");
      out.write("						str += memberListStr(result[i])\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("				$(\".sendTo\").append(title);\r\n");
      out.write("				$(\".sendTo\").append(str);\r\n");
      out.write("				\r\n");
      out.write("				/* 친구 선택 시 친구와의 채팅방 생성 */\r\n");
      out.write("				$(\".sendTo\").children().each(function() {\r\n");
      out.write("					$(this).on(\"click\", function() {\r\n");
      out.write("						/* 수신자 설정 */						\r\n");
      out.write("						receiverEmail = $(this).find(\"input\").val();\r\n");
      out.write("						receiverId = $(this).find(\"input\").data(\"id\");\r\n");
      out.write("						console.log(receiverId)\r\n");
      out.write("						/* 모달 닫기 */\r\n");
      out.write("						$(\"#receiver-modal\").modal(\"hide\")\r\n");
      out.write("						/* 채팅방 출력 */\r\n");
      out.write("						showChating(receiverEmail, receiverId);\r\n");
      out.write("					})\r\n");
      out.write("				})\r\n");
      out.write("			})\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		/* ------------------------- websocket ------------------------- */\r\n");
      out.write("		let ws = new WebSocket(\"ws://");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.serverName}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(':');
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.serverPort}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/message\")\r\n");
      out.write("		\r\n");
      out.write("		ws.onopen = function(ev) {\r\n");
      out.write("			console.log(\"연결 완료\", ev);\r\n");
      out.write("		}\r\n");
      out.write("		ws.onclose = function(ev) {\r\n");
      out.write("			console.log(\"연결 종료\", ev);\r\n");
      out.write("		}\r\n");
      out.write("		ws.onmessage = function(ev) {\r\n");
      out.write("\r\n");
      out.write("    		let obj = JSON.parse(ev.data);\r\n");
      out.write("   			let nowChat = obj.chat.length - 1;\r\n");
      out.write("   			/* ----------------------------------------------------------------------------------------------------- */\r\n");
      out.write("\r\n");
      out.write("   			// obj.get : 마지막 메시지\r\n");
      out.write("   			// obj.unCheck : 마지막 메시지 확인 여부\r\n");
      out.write("\r\n");
      out.write("   			console.log(\"uncheck\" + obj.unCheck)\r\n");
      out.write(" 			console.log(\"user\" + user) // == ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.email}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("			console.log(\"받는 사람\" + obj.receiver)\r\n");
      out.write("			console.log(\"보내는 사람email\" + obj.senderEmail) //\r\n");
      out.write("			console.log(obj.get)\r\n");
      out.write("			console.log(obj.get.mno)\r\n");
      out.write("			console.log(obj.lastSender)\r\n");
      out.write("\r\n");
      out.write("			/* 메시지 실시간 발송 */\r\n");
      out.write("\r\n");
      out.write("			// 메시지 수신시, 해당 채팅방을 이용하고 있을 때(클릭된 상태)\r\n");
      out.write(" 		   	if(user == obj.receiver && obj.senderEmail == receiverEmail) {\r\n");
      out.write("		   		// 해당 대상만 실시간 메시지 받기 & 채팅방 목록의 알림아이콘 삭제\r\n");
      out.write(" 		   		$(\".noteBox\").prepend(receiveStr(obj.get, ''));\r\n");
      out.write("				$(\".chatList\").prepend(ChatListStr(obj.lastSender, obj.get))\r\n");
      out.write("\r\n");
      out.write("				$(\".chatList > .p-2[data-room = '\"+ obj.get.room +\"']\").remove()\r\n");
      out.write("				$(\".chatList\").prepend(ChatListStr(obj.lastSender, obj.get))\r\n");
      out.write("\r\n");
      out.write("				// 수신 확인 & 해당 실시간 메시지 확인 표시('1') 업데이트\r\n");
      out.write("		   		messageService.receive({mno : obj.get.mno} , function() {\r\n");
      out.write("			   		$(\".unchecked\").html('');\r\n");
      out.write("				})\r\n");
      out.write("\r\n");
      out.write("			// 메시지 수신시, 현재 채팅창이 아닌 다른 채팅창을 이용하고 있을 때\r\n");
      out.write("		   	} else if(user == obj.receiver  && obj.senderEmail != receiverEmail) {\r\n");
      out.write("				$(\".chatList > .p-2[data-room = '\"+ obj.get.room +\"']\").remove()\r\n");
      out.write("				$(\".chatList\").prepend(ChatListStr(obj.lastSender, obj.get))\r\n");
      out.write("			   	checkReceive(obj.get, true);\r\n");
      out.write("		   	}\r\n");
      out.write("\r\n");
      out.write("			// 현재 클릭된 채팅방과 무관\r\n");
      out.write("			// 메시지 발신시 채팅방 목록에 채팅 바로 뜨게 하기\r\n");
      out.write("			if(user == obj.senderEmail){\r\n");
      out.write("				$(\".chatList > .p-2[data-room = '\"+ obj.get.room +\"']\").remove()\r\n");
      out.write("				$(\".chatList\").prepend(ChatListStr(obj.receiverVO , obj.get))\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("   		}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("   		$(\"#btnSend\").on(\"click\", function() {\r\n");
      out.write("   			$(\"#textMessage\").submit();\r\n");
      out.write("   		})\r\n");
      out.write("		$(\"#textMessage\").on(\"keyup\", function(e) {\r\n");
      out.write("			if(e.keyCode == 13) {\r\n");
      out.write("	   			$(\"#textMessage\").submit();\r\n");
      out.write("			}\r\n");
      out.write("		})   		\r\n");
      out.write("\r\n");
      out.write("		/* 메시지 보내기 */\r\n");
      out.write("		$(\"#textMessage\").submit(function() {\r\n");
      out.write("			event.preventDefault();\r\n");
      out.write("			let receiver = receiverEmail;\r\n");
      out.write("			let message = $(\"#textMessage\").val();\r\n");
      out.write("			\r\n");
      out.write("/* 			console.log(message.length)\r\n");
      out.write("			console.log(user);\r\n");
      out.write("			console.log(receiver);\r\n");
      out.write("			console.log(message); */\r\n");
      out.write("			\r\n");
      out.write("			let obj = {receiver: receiver, sender: user, message:message};\r\n");
      out.write("			console.log(obj);\r\n");
      out.write("			\r\n");
      out.write("			if(!user || !receiver || !message) {\r\n");
      out.write("				alert(\"메시지 전송에 실패하였습니다\");\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("			messageService.send(obj, function(data) {\r\n");
      out.write("				ws.send(receiver);\r\n");
      out.write("				$(\".noteBox\").prepend(sendStr(obj, '1'))\r\n");
      out.write("\r\n");
      out.write("				let msg = \"chat,\" + '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${member.id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("' + \",\" + receiver + \",\" + obj.message\r\n");
      out.write("				aws.send(msg);\r\n");
      out.write("\r\n");
      out.write("			}) \r\n");
      out.write("			$(\"#textMessage\").val('')\r\n");
      out.write("		})\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("			/* 보내는 채팅 Str */\r\n");
      out.write("			function sendStr(obj, unchecked) {\r\n");
      out.write("				/* let unchecked = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${obj.rdate == null ? \"\" : 1}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'; */\r\n");
      out.write("				return `\r\n");
      out.write("            	<div style=\"display: flex; flex-direction: row-reverse;\">\r\n");
      out.write("                	<div class=\"py-1 px-3 my-2 float-right\" \r\n");
      out.write("                		style=\"word-break: break-all;max-width: 400px;color:white; background-color:#b1b1b1; display:inline-block; border-radius: 8px;\">\r\n");
      out.write("                		${obj.message}\r\n");
      out.write("                	</div>\r\n");
      out.write("                	<span class=\"pb-2 px-1\" style=\"font-size:9px; color:#b1b1b1;align-self: end;\">${moment(obj.sdate).format(\"HH:mm\")}</span>\r\n");
      out.write("        			<span class=\"pb-2 px-1 unchecked\" style=\"font-size:9px; color:#ded283;align-self: end\">` + unchecked + `</span>\r\n");
      out.write("                </div>					\r\n");
      out.write("				`;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write("			/* 받는 채팅 Str */\r\n");
      out.write("			function receiveStr(obj, unchecked) {\r\n");
      out.write("				/* let unchecked = '");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${obj.rdate == null ? \"\" : 1}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("'; */\r\n");
      out.write("				return `\r\n");
      out.write("            	<div style=\"display: flex;\">\r\n");
      out.write("                	<div class=\"py-1 px-3 my-2 float-left\" \r\n");
      out.write("                		style=\"word-break: break-all;max-width: 400px;color:white; background-color:#58bbe3; display:inline-block; border-radius: 8px;\">\r\n");
      out.write("                		${obj.message}\r\n");
      out.write("                	</div>\r\n");
      out.write("                	<span class=\"pb-2 px-1\" style=\"font-size:9px; color:#b1b1b1;align-self: end;\">${moment(obj.sdate).format(\"HH:mm\")}</span>\r\n");
      out.write("        			<span class=\"pb-2 px-1 unchecked\" style=\"font-size:9px; color:#ded283;align-self: end;\">` + unchecked + `</span>\r\n");
      out.write("            	</div>\r\n");
      out.write("            	`;\r\n");
      out.write("			}\r\n");
      out.write("			\r\n");
      out.write(" 	 })\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write(" ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../layout/footer.jsp", out, false);
      out.write('\r');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
