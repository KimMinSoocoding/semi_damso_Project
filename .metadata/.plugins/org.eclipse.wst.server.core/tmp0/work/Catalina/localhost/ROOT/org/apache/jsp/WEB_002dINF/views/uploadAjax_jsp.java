/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.68
 * Generated at: 2023-04-21 01:29:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class uploadAjax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Title</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/vendor/fontawesome-free/css/all.min.css\" type=\"text/css\">\r\n");
      out.write("    <script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/vendor/jquery/jquery.min.js\"></script>\r\n");
      out.write("    <style>\r\n");
      out.write("        .bigPictureWrapper {\r\n");
      out.write("            position : absolute;\r\n");
      out.write("            display: none;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            top: 0;\r\n");
      out.write("            height: 100%;\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            background-color: gray;\r\n");
      out.write("            z-index: 100;\r\n");
      out.write("            background: rgba(0, 0, 0, .5);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .bigPicture {\r\n");
      out.write("            position: relative;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .bigPicture img {\r\n");
      out.write("            width: 600px;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<form method=\"post\" enctype=\"multipart/form-data\">\r\n");
      out.write("    <label for=\"files\"><i class=\"fas fa-folder-plus\"></i></label>\r\n");
      out.write("    <input id=\"files\" type=\"file\" name=\"files\" multiple accept=\"image/jpeg\">\r\n");
      out.write("    <button>submit</button>\r\n");
      out.write("</form>\r\n");
      out.write("<div class=\"uploadResult\">\r\n");
      out.write("    <ul>\r\n");
      out.write("\r\n");
      out.write("    </ul>\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"bigPictureWrapper\">\r\n");
      out.write("    <div class=\"bigPicture\"></div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    $(function () {\r\n");
      out.write("        $(\".bigPictureWrapper\").on(\"click\", function (e) {\r\n");
      out.write("            $(\".bigPicture\").animate({width: '0%', height: '0%'}, 1000);\r\n");
      out.write("            setTimeout(function () {\r\n");
      out.write("                $(\".bigPictureWrapper\").hide();\r\n");
      out.write("            }, 1000)\r\n");
      out.write("        })\r\n");
      out.write("\r\n");
      out.write("        function checkExtension(files) {\r\n");
      out.write("            const MAX_SIZE = 5 * 1024 * 1024;\r\n");
      out.write("            const EXCLUDE_EXT = new RegExp(\"(.*?)\\.(js|jsp|asp|php)\");\r\n");
      out.write("\r\n");
      out.write("            for (let i in files) {\r\n");
      out.write("                if (files[i].size >= MAX_SIZE || EXCLUDE_EXT.test(files[i].name)) {\r\n");
      out.write("                    return false;\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("            return true\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        function showUploadedFile(uploadResultArr) {\r\n");
      out.write("            let str = \"\";\r\n");
      out.write("            for(let i in uploadResultArr) {\r\n");
      out.write("                let obj = uploadResultArr[i];\r\n");
      out.write("                obj.thumb = \"on\";\r\n");
      out.write("                let params = new URLSearchParams(obj).toString();\r\n");
      out.write("                if(!obj.image){\r\n");
      out.write("                    str += \"<li><a href='/download?\" + params + \"'><i class='far fa-file'></i> \";\r\n");
      out.write("                }\r\n");
      out.write("                else {\r\n");
      out.write("                    obj.thumb = \"off\";\r\n");
      out.write("                    let params2 = new URLSearchParams(obj).toString();\r\n");
      out.write("                    str += '<li><a class=\"img-thumb\" href=\"\"><img src=\"/display?' + params  + '\" data-src=\"'+ params2 +'\" >' ;\r\n");
      out.write("                    /*                 str += '<li><a href=\"javascript:showImage(\\''+ params2 +'\\')\"><img src=\"/display?' + params  + '\" >' + obj.name + '</a></li>' */\r\n");
      out.write("                }\r\n");
      out.write("                str += obj.name + \"</a> <i class='far fa-times-circle btn-remove' style='cursor:pointer'></i> </li>\"\r\n");
      out.write("            }\r\n");
      out.write("            // 내부적으로 스트림 사용\r\n");
      out.write("            $(\".uploadResult ul\").append(str);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        $(\".uploadResult ul\").on(\"click\", \".btn-remove\", function () {\r\n");
      out.write("            event.preventDefault()\r\n");
      out.write("            let file = $(this).closest(\"li\").find(\"img\").data(\"src\");\r\n");
      out.write("            console.log(file)\r\n");
      out.write("            $.getJSON(\"/deleteFile?\" + file).done(function (data) {\r\n");
      out.write("\r\n");
      out.write("            })\r\n");
      out.write("        })\r\n");
      out.write("\r\n");
      out.write("        $(\".uploadResult ul\").on(\"click\" , \".img-thumb\", function () {\r\n");
      out.write("            event.preventDefault()\r\n");
      out.write("            $(\".bigPictureWrapper\").css(\"display\", \"flex\").show();\r\n");
      out.write("            let param = $(this).find(\"img\").data(\"src\")\r\n");
      out.write("            console.log(param)\r\n");
      out.write("            $(\".bigPicture\")\r\n");
      out.write("                .html(\"<img src='/display?\" + param + \"'>\")\r\n");
      out.write("                .animate({width: '100%', height : '100%'}, 1000)\r\n");
      out.write("        })\r\n");
      out.write("\r\n");
      out.write("        $(\"form button\").click(function () {\r\n");
      out.write("            event.preventDefault();\r\n");
      out.write("            let files = $(\":file\").get(0).files;\r\n");
      out.write("            console.log(files);\r\n");
      out.write("\r\n");
      out.write("            if (!checkExtension(files)) {\r\n");
      out.write("                alert(\"조건 불일치\")\r\n");
      out.write("                return false;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            let formData = new FormData();\r\n");
      out.write("\r\n");
      out.write("            for (let i in files) {\r\n");
      out.write("                formData.append(\"files\", files[i])\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                url : \"/uploadAjax\",\r\n");
      out.write("                processData: false,\r\n");
      out.write("                contentType : false,\r\n");
      out.write("                data : formData,\r\n");
      out.write("                method : \"post\",\r\n");
      out.write("                success : function (data) {\r\n");
      out.write("                    console.log(data)\r\n");
      out.write("                    $(\"form\").get(0).reset();\r\n");
      out.write("                    showUploadedFile(data)\r\n");
      out.write("                }\r\n");
      out.write("            })\r\n");
      out.write("        })\r\n");
      out.write("    })\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
